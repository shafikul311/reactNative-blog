{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { RNSharedElementNode } from \"./RNSharedElementNode\";\nexport var RNSharedElementNodeManager = function () {\n  function RNSharedElementNodeManager() {\n    _classCallCheck(this, RNSharedElementNodeManager);\n\n    this.nodes = new Map();\n  }\n\n  _createClass(RNSharedElementNodeManager, [{\n    key: \"acquire\",\n    value: function acquire(domNode, isParent, ancestorDomNode) {\n      var node = this.nodes.get(domNode);\n\n      if (node) {\n        node.addRef();\n        return node;\n      }\n\n      node = new RNSharedElementNode(domNode, isParent, ancestorDomNode);\n      this.nodes.set(domNode, node);\n      return node;\n    }\n  }, {\n    key: \"release\",\n    value: function release(node) {\n      var refCount = node.releaseRef();\n\n      if (!refCount) {\n        this.nodes.delete(node.domNode);\n      }\n\n      return refCount;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!RNSharedElementNodeManager.instance) {\n        RNSharedElementNodeManager.instance = new RNSharedElementNodeManager();\n      }\n\n      return RNSharedElementNodeManager.instance;\n    }\n  }]);\n\n  return RNSharedElementNodeManager;\n}();","map":{"version":3,"sources":["RNSharedElementNodeManager.ts"],"names":["RNSharedElementNodeManager","node","refCount"],"mappings":";;AAAA,SAAA,mBAAA;AAGA,OAAA,IAAaA,0BAAb,GAAA,YAAA;AAAA,WAAA,0BAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,0BAAA,CAAA;;AAAA,SAAA,KAAA,GACkB,IADlB,GACkB,EADlB;AAAA;;AAAA,EAAA,YAAA,CAAA,0BAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EAAA,SAAA,OAAA,CAAA,OAAA,EAAA,QAAA,EAAA,eAAA,EAeyB;AACrB,UAAIC,IAAI,GAAG,KAAA,KAAA,CAAA,GAAA,CAAX,OAAW,CAAX;;AACA,UAAA,IAAA,EAAU;AACRA,QAAAA,IAAI,CAAJA,MAAAA;AACA,eAAA,IAAA;AAEFA;;AAAAA,MAAAA,IAAI,GAAG,IAAA,mBAAA,CAAA,OAAA,EAAA,QAAA,EAAPA,eAAO,CAAPA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,OAAA,EAAA,IAAA;AACA,aAAA,IAAA;AAvBJ;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EAAA,SAAA,OAAA,CAAA,IAAA,EA0BqC;AACjC,UAAMC,QAAQ,GAAGD,IAAI,CAArB,UAAiBA,EAAjB;;AACA,UAAI,CAAJ,QAAA,EAAe;AACb,aAAA,KAAA,CAAA,MAAA,CAAkBA,IAAI,CAAtB,OAAA;AAEF;;AAAA,aAAA,QAAA;AA/BJ;AAAA,GAAA,CAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAAA,SAAA,WAAA,GAImD;AAC/C,UAAI,CAACD,0BAA0B,CAA/B,QAAA,EAA0C;AACxCA,QAAAA,0BAA0B,CAA1BA,QAAAA,GAAsC,IAAtCA,0BAAsC,EAAtCA;AAEF;;AAAA,aAAOA,0BAA0B,CAAjC,QAAA;AARJ;AAAA,GAAA,CAAA,CAAA;;AAAA,SAAA,0BAAA;AAAA,CAAA,EAAA","sourcesContent":["import { RNSharedElementNode } from './RNSharedElementNode';\nimport { IHTMLElement } from './types';\n\nexport class RNSharedElementNodeManager {\n  private nodes = new Map<HTMLElement, RNSharedElementNode>();\n  private static instance: RNSharedElementNodeManager;\n\n  static getInstance(): RNSharedElementNodeManager {\n    if (!RNSharedElementNodeManager.instance) {\n      RNSharedElementNodeManager.instance = new RNSharedElementNodeManager();\n    }\n    return RNSharedElementNodeManager.instance;\n  }\n\n  acquire(\n    domNode: IHTMLElement,\n    isParent: boolean,\n    ancestorDomNode: IHTMLElement\n  ): RNSharedElementNode {\n    let node = this.nodes.get(domNode);\n    if (node) {\n      node.addRef();\n      return node;\n    }\n    node = new RNSharedElementNode(domNode, isParent, ancestorDomNode);\n    this.nodes.set(domNode, node);\n    return node;\n  }\n\n  release(node: RNSharedElementNode) {\n    const refCount = node.releaseRef();\n    if (!refCount) {\n      this.nodes.delete(node.domNode);\n    }\n    return refCount;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}