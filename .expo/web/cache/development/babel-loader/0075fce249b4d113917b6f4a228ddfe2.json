{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Scic Porjects\\\\reactNative-blog\\\\node_modules\\\\react-native-touchable-scale\\\\src\\\\TouchableScale.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\n\nvar TouchableScale = function (_React$Component) {\n  _inherits(TouchableScale, _React$Component);\n\n  var _super = _createSuper(TouchableScale);\n\n  function TouchableScale() {\n    var _this;\n\n    _classCallCheck(this, TouchableScale);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    var props = _this.props;\n    _this.onPressIn = _this.onPressIn.bind(_assertThisInitialized(_this));\n    _this.onPressOut = _this.onPressOut.bind(_assertThisInitialized(_this));\n    _this.scaleAnimation = new Animated.Value(props.defaultScale);\n    return _this;\n  }\n\n  _createClass(TouchableScale, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return React.createElement(TouchableWithoutFeedback, _extends({}, props, {\n        onPressIn: this.onPressIn,\n        onPressOut: this.onPressOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }), React.createElement(Animated.View, {\n        style: [props.style, {\n          transform: [{\n            scale: this.scaleAnimation\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, props.children));\n    }\n  }, {\n    key: \"onPressIn\",\n    value: function onPressIn() {\n      var props = this.props;\n      var tension = typeof props.pressInTension !== 'undefined' ? props.pressInTension : props.tension;\n      var friction = typeof props.pressInFriction !== 'undefined' ? props.pressInFriction : props.friction;\n      Animated.spring(this.scaleAnimation, {\n        toValue: props.activeScale,\n        tension: tension,\n        friction: friction,\n        useNativeDriver: props.useNativeDriver\n      }).start();\n\n      if (props.onPressIn) {\n        props.onPressIn.apply(props, arguments);\n      }\n    }\n  }, {\n    key: \"onPressOut\",\n    value: function onPressOut() {\n      var props = this.props;\n      var tension = typeof props.pressOutTension !== 'undefined' ? props.pressOutTension : props.tension;\n      var friction = typeof props.pressOutFriction !== 'undefined' ? props.pressOutFriction : props.friction;\n      Animated.spring(this.scaleAnimation, {\n        toValue: props.defaultScale,\n        tension: tension,\n        friction: friction,\n        useNativeDriver: props.useNativeDriver\n      }).start();\n\n      if (props.onPressOut) {\n        props.onPressOut.apply(props, arguments);\n      }\n    }\n  }]);\n\n  return TouchableScale;\n}(React.Component);\n\nexport { TouchableScale as default };\nTouchableScale.propTypes = _objectSpread(_objectSpread({}, TouchableWithoutFeedback.propTypes), {}, {\n  style: ViewPropTypes.style,\n  defaultScale: PropTypes.number.isRequired,\n  activeScale: PropTypes.number.isRequired,\n  tension: PropTypes.number.isRequired,\n  friction: PropTypes.number.isRequired,\n  pressInTension: PropTypes.number,\n  pressInFriction: PropTypes.number,\n  pressOutTension: PropTypes.number,\n  pressOutFriction: PropTypes.number,\n  useNativeDriver: PropTypes.bool\n});\nTouchableScale.defaultProps = {\n  defaultScale: 1,\n  activeScale: 0.9,\n  tension: 150,\n  friction: 3,\n  useNativeDriver: true\n};","map":{"version":3,"sources":["E:/Scic Porjects/reactNative-blog/node_modules/react-native-touchable-scale/src/TouchableScale.js"],"names":["React","PropTypes","TouchableScale","args","props","onPressIn","bind","onPressOut","scaleAnimation","Animated","Value","defaultScale","style","transform","scale","children","tension","pressInTension","friction","pressInFriction","spring","toValue","activeScale","useNativeDriver","start","pressOutTension","pressOutFriction","Component","propTypes","TouchableWithoutFeedback","ViewPropTypes","number","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport { TouchableWithoutFeedback, Animated, ViewPropTypes } from 'react-native';\n\n/**\n * @typedef {Object} TouchableWithoutFeedbackProps\n * @property {Object} children\n * @property {Object} [accessibilityComponentType]\n * @property {boolean} [accessibilityTraits]\n * @property {boolean} [accessible]\n * @property {number} [delayLongPress]\n * @property {number} [delayPressIn]\n * @property {number} [delayPressOut]\n * @property {boolean} [disabled]\n * @property {Object} [hitSlop]\n * @property {{top: number, left: number, bottom: number, right: number}} [hitSlop]\n * @property {Function} [onLayout]\n * @property {Function} [onLongPress]\n * @property {Function} [onPress]\n * @property {Function} [onPressIn]\n * @property {Function} [onPressOut]\n * @property {{top: number, left: number, bottom: number, right: number}} [pressRetentionOffset]\n */\n\n/**\n * @typedef {TouchableWithoutFeedbackProps} TouchableScaleProps\n * @property {Object} [style]\n * @property {number} [defaultScale=1]\n * @property {number} [activeScale=0.9]\n * @property {number} [tension=150]\n * @property {number} [friction=3]\n * @property {number} [pressInTension]\n * @property {number} [pressInFriction]\n * @property {number} [pressOutTension]\n * @property {number} [pressOutFriction]\n * @property {boolean} [useNativeDriver]\n */\nexport default class TouchableScale extends React.Component {\n    constructor(...args) {\n        super(...args);\n        /** @type {TouchableScaleProps} */\n        const props = this.props;\n\n        this.onPressIn = this.onPressIn.bind(this);\n        this.onPressOut = this.onPressOut.bind(this);\n        this.scaleAnimation = new Animated.Value(props.defaultScale);\n    }\n\n    render() {\n        /** @type {TouchableScaleProps} */\n        const props = this.props;\n\n        return (\n            <TouchableWithoutFeedback\n                // todo: pass only TouchableWithoutFeedback's props.\n                {...props}\n                onPressIn={this.onPressIn}\n                onPressOut={this.onPressOut}\n            >\n                <Animated.View\n                    style={[props.style, {\n                        transform: [\n                            {scale: this.scaleAnimation},\n                        ]},\n                    ]}\n                >\n                    {props.children}\n                </Animated.View>\n            </TouchableWithoutFeedback>\n        );\n    }\n\n    onPressIn(...args) {\n        /** @type {TouchableScaleProps} */\n        const props = this.props;\n        const tension = typeof props.pressInTension !== 'undefined' ? props.pressInTension : props.tension;\n        const friction = typeof props.pressInFriction !== 'undefined' ? props.pressInFriction : props.friction;\n\n        Animated.spring(this.scaleAnimation, {\n            toValue: props.activeScale,\n            tension: tension,\n            friction: friction,\n            useNativeDriver: props.useNativeDriver,\n        }).start();\n\n        if (props.onPressIn) {\n            props.onPressIn(...args);\n        }\n    }\n\n    onPressOut(...args) {\n        /** @type {TouchableScaleProps} */\n        const props = this.props;\n        const tension = typeof props.pressOutTension !== 'undefined' ? props.pressOutTension : props.tension;\n        const friction = typeof props.pressOutFriction !== 'undefined' ? props.pressOutFriction : props.friction;\n\n        Animated.spring(this.scaleAnimation, {\n            toValue: props.defaultScale,\n            tension: tension,\n            friction: friction,\n            useNativeDriver: props.useNativeDriver,\n        }).start();\n\n        if (props.onPressOut) {\n            props.onPressOut(...args);\n        }\n    }\n}\n\nTouchableScale.propTypes = {\n    ...TouchableWithoutFeedback.propTypes,\n    style: ViewPropTypes.style,\n    defaultScale: PropTypes.number.isRequired,\n    activeScale: PropTypes.number.isRequired,\n    tension: PropTypes.number.isRequired,\n    friction: PropTypes.number.isRequired,\n    pressInTension: PropTypes.number,\n    pressInFriction: PropTypes.number,\n    pressOutTension: PropTypes.number,\n    pressOutFriction: PropTypes.number,\n    useNativeDriver: PropTypes.bool,\n};\n\nTouchableScale.defaultProps = {\n    defaultScale: 1,\n    activeScale: 0.9,\n    tension: 150,\n    friction: 3,\n    useNativeDriver: true,\n};\n"]},"metadata":{},"sourceType":"module"}