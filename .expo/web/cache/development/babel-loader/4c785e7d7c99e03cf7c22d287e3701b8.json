{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { RNSharedElementTransitionItem } from \"./RNSharedElementTransitionItem\";\nimport { RNSharedElementNodeManager } from \"./RNSharedElementNodeManager\";\nimport { RNSharedElementAnimation, RNSharedElementResize, RNSharedElementAlign } from \"./types\";\nimport { Rect } from \"./Rect\";\nimport { RNSharedElementStyle } from \"./RNSharedElementStyle\";\nimport { RNSharedElementContent } from \"./RNSharedElementContent\";\nimport { RNSharedElementView } from \"./RNSharedElementView\";\nexport var RNSharedElementTransition = function () {\n  function RNSharedElementTransition() {\n    _classCallCheck(this, RNSharedElementTransition);\n\n    this.items = [new RNSharedElementTransitionItem(RNSharedElementNodeManager.getInstance(), 'start'), new RNSharedElementTransitionItem(RNSharedElementNodeManager.getInstance(), 'end')];\n    this.animation = RNSharedElementAnimation.Move;\n    this.resize = RNSharedElementResize.Auto;\n    this.align = RNSharedElementAlign.Auto;\n    this.nodePosition = 0;\n    this.element = null;\n    this.layout = Rect.empty;\n    this.views = [null, null];\n  }\n\n  _createClass(RNSharedElementTransition, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.element = null;\n      this.items.forEach(function (item) {\n        return item.node = null;\n      });\n    }\n  }, {\n    key: \"setNode\",\n    value: function setNode(end, node, ancestor) {\n      this.items[end ? 1 : 0].node = node && ancestor ? RNSharedElementNodeManager.getInstance().acquire(node.nodeHandle, node.isParent, ancestor.nodeHandle) : null;\n    }\n  }, {\n    key: \"didSetProps\",\n    value: function didSetProps() {\n      this.requestStylesAndContent();\n      this.updateLayout();\n      this.updateNodeVisibility();\n    }\n  }, {\n    key: \"requestStylesAndContent\",\n    value: function requestStylesAndContent() {\n      var _this = this;\n\n      this.items.forEach(function (item) {\n        if (item.needsStyle) {\n          item.needsStyle = false;\n          item.node.requestStyle().then(function (style) {\n            item.style = style;\n\n            _this.updateLayout();\n          });\n        }\n\n        if (item.needsContent) {\n          item.needsContent = false;\n          item.node.requestContent().then(function (content) {\n            item.content = content;\n\n            _this.updateLayout();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"updateNodeVisibility\",\n    value: function updateNodeVisibility() {\n      var items = this.items,\n          animation = this.animation;\n      items.forEach(function (item) {\n        var hidden = item.style && item.content ? true : false;\n        if (hidden && animation === RNSharedElementAnimation.FadeIn && item.name === 'start') hidden = false;\n        if (hidden && animation === RNSharedElementAnimation.FadeOut && item.name === 'end') hidden = false;\n        item.hidden = hidden;\n      });\n    }\n  }, {\n    key: \"updateLayout\",\n    value: function updateLayout() {\n      var element = this.element,\n          items = this.items,\n          nodePosition = this.nodePosition,\n          animation = this.animation;\n      if (!element) return;\n      this.layout = new Rect(element.getBoundingClientRect());\n      var startStyle = items[0].style;\n      var endStyle = items[1].style;\n      if (!startStyle && !endStyle) return;\n      var startContent = items[0].content;\n      var endContent = items[1].content;\n      var startLayout = startStyle ? startStyle.layout : Rect.empty;\n      var startContentLayout = startStyle ? RNSharedElementContent.getLayout(startLayout, startContent, startStyle.style.backgroundSize) : startLayout;\n      var endLayout = endStyle ? endStyle.layout : Rect.empty;\n      var endContentLayout = endStyle ? RNSharedElementContent.getLayout(endLayout, endContent || startContent, endStyle.style.backgroundSize) : endLayout;\n      var interpolatedLayout = startLayout;\n      var interpolatedStyle = startStyle;\n      var interpolatedContentLayout = startContentLayout;\n\n      if (startStyle && endStyle) {\n        interpolatedLayout = RNSharedElementStyle.getInterpolatedLayout(startLayout, endLayout, nodePosition);\n        interpolatedStyle = RNSharedElementStyle.getInterpolatedStyle(startStyle, endStyle, nodePosition);\n        interpolatedContentLayout = RNSharedElementStyle.getInterpolatedLayout(startContentLayout, endContentLayout, nodePosition);\n      } else if (startStyle) {\n        interpolatedLayout = startLayout;\n        interpolatedStyle = startStyle;\n        interpolatedContentLayout = startContentLayout;\n      } else {\n        interpolatedLayout = endLayout;\n        interpolatedStyle = endStyle;\n        interpolatedContentLayout = endContentLayout;\n      }\n\n      if (animation === RNSharedElementAnimation.Move || animation === RNSharedElementAnimation.Fade || animation === RNSharedElementAnimation.FadeOut) {\n        var startOpacity = animation === RNSharedElementAnimation.Move ? interpolatedStyle.opacity : (startStyle ? startStyle.opacity : 1) * (1 - nodePosition);\n        this.updateView(0, interpolatedLayout, interpolatedStyle, interpolatedContentLayout, startLayout, startContent, startOpacity);\n      }\n\n      if (animation === RNSharedElementAnimation.Fade || animation === RNSharedElementAnimation.FadeIn) {\n        var endOpacity = (endStyle ? endStyle.opacity : 1) * nodePosition;\n        this.updateView(1, interpolatedLayout, interpolatedStyle, interpolatedContentLayout, endLayout, endContent, endOpacity);\n      }\n    }\n  }, {\n    key: \"updateView\",\n    value: function updateView(index, interpolatedLayout, interpolatedStyle, interpolatedContentLayout, originalLayout, content, opacity) {\n      var view = this.views[index];\n\n      if (!view) {\n        view = new RNSharedElementView();\n        this.element.appendChild(view.element);\n        this.views[index] = view;\n      }\n\n      view.resize = this.resize;\n      view.align = this.align;\n      view.parentLayout = this.layout;\n      view.originalLayout = originalLayout;\n      view.layout = interpolatedLayout;\n      view.contentLayout = interpolatedContentLayout;\n      view.style = interpolatedStyle;\n\n      if (!view.contentElement) {\n        if (!content || !content.element) return;\n        view.contentElement = content.element.cloneNode(true);\n      }\n\n      view.contentElement.style.opacity = opacity;\n      view.updateLayout();\n    }\n  }]);\n\n  return RNSharedElementTransition;\n}();","map":{"version":3,"sources":["RNSharedElementTransition.ts"],"names":["RNSharedElementTransition","RNSharedElementNodeManager","RNSharedElementAnimation","RNSharedElementResize","RNSharedElementAlign","Rect","item","end","node","ancestor","items","animation","hidden","element","nodePosition","startStyle","endStyle","startContent","endContent","startLayout","startContentLayout","RNSharedElementContent","endLayout","endContentLayout","interpolatedLayout","interpolatedStyle","interpolatedContentLayout","RNSharedElementStyle","startOpacity","endOpacity","view","content"],"mappings":"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","sourcesContent":["import { RNSharedElementTransitionItem } from './RNSharedElementTransitionItem';\n// import { RNSharedElementNode } from \"./RNSharedElementNode\";\nimport { RNSharedElementNodeManager } from './RNSharedElementNodeManager';\nimport {\n  RNSharedElementNodeConfig,\n  RNSharedElementAnimation,\n  RNSharedElementResize,\n  RNSharedElementAlign,\n  IHTMLElement,\n} from './types';\nimport { Rect } from './Rect';\nimport { RNSharedElementStyle } from './RNSharedElementStyle';\nimport { RNSharedElementContent } from './RNSharedElementContent';\nimport { RNSharedElementView } from './RNSharedElementView';\n\nexport class RNSharedElementTransition {\n  private items = [\n    new RNSharedElementTransitionItem(\n      RNSharedElementNodeManager.getInstance(),\n      'start'\n    ),\n    new RNSharedElementTransitionItem(\n      RNSharedElementNodeManager.getInstance(),\n      'end'\n    ),\n  ];\n  public animation: RNSharedElementAnimation = RNSharedElementAnimation.Move;\n  public resize: RNSharedElementResize = RNSharedElementResize.Auto;\n  public align: RNSharedElementAlign = RNSharedElementAlign.Auto;\n  public nodePosition: number = 0;\n  public element: IHTMLElement | null = null;\n  private layout: Rect = Rect.empty;\n  private views: (RNSharedElementView | null)[] = [null, null];\n\n  public destroy() {\n    this.element = null;\n    this.items.forEach(item => (item.node = null));\n  }\n\n  public setNode(\n    end: boolean,\n    node: RNSharedElementNodeConfig | null,\n    ancestor: RNSharedElementNodeConfig | null\n  ) {\n    this.items[end ? 1 : 0].node =\n      node && ancestor\n        ? RNSharedElementNodeManager.getInstance().acquire(\n            node.nodeHandle,\n            node.isParent,\n            ancestor.nodeHandle\n          )\n        : null;\n  }\n\n  public didSetProps() {\n    this.requestStylesAndContent();\n    this.updateLayout();\n    this.updateNodeVisibility();\n  }\n\n  private requestStylesAndContent() {\n    this.items.forEach(item => {\n      if (item.needsStyle) {\n        item.needsStyle = false;\n        item.node!.requestStyle().then(style => {\n          item.style = style;\n          this.updateLayout();\n        });\n      }\n      if (item.needsContent) {\n        item.needsContent = false;\n        item.node!.requestContent().then(content => {\n          item.content = content;\n          this.updateLayout();\n        });\n      }\n    });\n  }\n\n  private updateNodeVisibility() {\n    const { items, animation } = this;\n    items.forEach(item => {\n      let hidden = item.style && item.content ? true : false;\n      if (\n        hidden &&\n        animation === RNSharedElementAnimation.FadeIn &&\n        item.name === 'start'\n      )\n        hidden = false;\n      if (\n        hidden &&\n        animation === RNSharedElementAnimation.FadeOut &&\n        item.name === 'end'\n      )\n        hidden = false;\n      item.hidden = hidden;\n    });\n  }\n\n  private updateLayout() {\n    const {\n      element,\n      items,\n      nodePosition,\n      animation /*, animation, resize, align*/,\n    } = this;\n    if (!element) return;\n\n    // Get parent layout\n    this.layout = new Rect(element.getBoundingClientRect());\n\n    // Get styles & content\n    const startStyle = items[0].style;\n    const endStyle = items[1].style;\n    if (!startStyle && !endStyle) return;\n    const startContent = items[0].content;\n    const endContent = items[1].content;\n\n    // Get start layout\n    const startLayout = startStyle ? startStyle.layout : Rect.empty;\n    const startContentLayout = startStyle\n      ? RNSharedElementContent.getLayout(\n          startLayout,\n          startContent,\n          startStyle.style.backgroundSize\n        )\n      : startLayout;\n    //CGRect startVisibleLayout = startStyle ? [self normalizeLayout:[startItem visibleLayoutForAncestor:startAncestor] ancestor:startAncestor] : CGRectZero;\n    //UIEdgeInsets startClipInsets = [self getClipInsets:startLayout visibleLayout:startVisibleLayout];\n\n    // Get end layout\n    const endLayout = endStyle ? endStyle.layout : Rect.empty;\n    const endContentLayout = endStyle\n      ? RNSharedElementContent.getLayout(\n          endLayout,\n          endContent || startContent,\n          endStyle.style.backgroundSize\n        )\n      : endLayout;\n\n    // Get interpolated layout\n    let interpolatedLayout: Rect = startLayout;\n    let interpolatedStyle: RNSharedElementStyle = startStyle!;\n    let interpolatedContentLayout: Rect = startContentLayout;\n    // let interpolatedClipInsets: Rect = Rect.empty;\n    if (startStyle && endStyle) {\n      interpolatedLayout = RNSharedElementStyle.getInterpolatedLayout(\n        startLayout,\n        endLayout,\n        nodePosition\n      );\n      // interpolatedClipInsets = getInterpolatedClipInsets(parentLayout, startClipInsets, startClippedLayout, endClipInsets, endClippedLayout, mNodePosition);\n      interpolatedStyle = RNSharedElementStyle.getInterpolatedStyle(\n        startStyle,\n        endStyle,\n        nodePosition\n      );\n      interpolatedContentLayout = RNSharedElementStyle.getInterpolatedLayout(\n        startContentLayout,\n        endContentLayout,\n        nodePosition\n      );\n    } else if (startStyle) {\n      interpolatedLayout = startLayout;\n      interpolatedStyle = startStyle;\n      interpolatedContentLayout = startContentLayout;\n      // interpolatedClipInsets = startClipInsets;\n    } else {\n      interpolatedLayout = endLayout;\n      interpolatedStyle = endStyle!;\n      interpolatedContentLayout = endContentLayout;\n      // interpolatedClipInsets = endClipInsets;\n    }\n\n    if (\n      animation === RNSharedElementAnimation.Move ||\n      animation === RNSharedElementAnimation.Fade ||\n      animation === RNSharedElementAnimation.FadeOut\n    ) {\n      const startOpacity =\n        animation === RNSharedElementAnimation.Move\n          ? interpolatedStyle.opacity\n          : (startStyle ? startStyle.opacity : 1) * (1 - nodePosition);\n      this.updateView(\n        0,\n        interpolatedLayout,\n        interpolatedStyle,\n        interpolatedContentLayout,\n        startLayout,\n        startContent,\n        startOpacity\n      );\n    }\n    if (\n      animation === RNSharedElementAnimation.Fade ||\n      animation === RNSharedElementAnimation.FadeIn\n    ) {\n      const endOpacity = (endStyle ? endStyle.opacity : 1) * nodePosition;\n      this.updateView(\n        1,\n        interpolatedLayout,\n        interpolatedStyle,\n        interpolatedContentLayout,\n        endLayout,\n        endContent,\n        endOpacity\n      );\n    }\n  }\n\n  private updateView(\n    index: number,\n    interpolatedLayout: Rect,\n    interpolatedStyle: RNSharedElementStyle,\n    interpolatedContentLayout: Rect,\n    originalLayout: Rect,\n    content: RNSharedElementContent | null,\n    opacity: number\n  ) {\n    // Find / create view\n    let view = this.views[index];\n    if (!view) {\n      view = new RNSharedElementView();\n      this.element!.appendChild(view.element);\n      this.views[index] = view;\n    }\n\n    // Set resize & align\n    view.resize = this.resize;\n    view.align = this.align;\n\n    // Set layouts\n    view.parentLayout = this.layout;\n    view.originalLayout = originalLayout;\n    view.layout = interpolatedLayout;\n    view.contentLayout = interpolatedContentLayout;\n\n    // Set style\n    view.style = interpolatedStyle;\n\n    // If the content-element does not yet exist, then clone it and add it to the view\n    if (!view.contentElement) {\n      if (!content || !content.element) return;\n      view.contentElement = content.element.cloneNode(true);\n    }\n    view.contentElement!.style.opacity = opacity;\n\n    // Update layout\n    view.updateLayout();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}