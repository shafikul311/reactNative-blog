{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { parseColor, interpolateColor } from \"./Color.web\";\nimport { Rect } from \"./Rect.web\";\n\nfunction interpolate(val1, val2, position) {\n  return val1 + (val2 - val1) * position;\n}\n\nexport var RNSharedElementStyle = function () {\n  function RNSharedElementStyle(layout, style) {\n    _classCallCheck(this, RNSharedElementStyle);\n\n    this.layout = layout;\n    this.style = style;\n    this.opacity = Number(style.opacity);\n    this.backgroundColor = parseColor(style.backgroundColor);\n  }\n\n  _createClass(RNSharedElementStyle, null, [{\n    key: \"getInterpolatedLayout\",\n    value: function getInterpolatedLayout(layout1, layout2, position) {\n      return new Rect({\n        x: interpolate(layout1.x, layout2.x, position),\n        y: interpolate(layout1.y, layout2.y, position),\n        width: interpolate(layout1.width, layout2.width, position),\n        height: interpolate(layout1.height, layout2.height, position)\n      });\n    }\n  }, {\n    key: \"getInterpolatedStyle\",\n    value: function getInterpolatedStyle(style1, style2, position) {\n      var layout = RNSharedElementStyle.getInterpolatedLayout(style1.layout, style2.layout, position);\n      return new RNSharedElementStyle(layout, _objectSpread(_objectSpread({}, style1), {}, {\n        opacity: interpolate(style1.opacity, style2.opacity, position),\n        backgroundColor: interpolateColor(style1.backgroundColor, style2.backgroundColor, position)\n      }));\n    }\n  }]);\n\n  return RNSharedElementStyle;\n}();","map":{"version":3,"sources":["../../src/web/RNSharedElementStyle.web.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAgB,UAAhB,EAA4B,gBAA5B;AACA,SAAS,IAAT;;AAcA,SAAS,WAAT,CAAqB,IAArB,EAAmC,IAAnC,EAAiD,QAAjD,EAAiE;AAC/D,SAAO,IAAI,GAAG,CAAC,IAAI,GAAG,IAAR,IAAgB,QAA9B;AACD;;AAED,WAAa,oBAAb;AAME,gCAAY,MAAZ,EAA0B,KAA1B,EAAoD;AAAA;;AAClD,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,OAAL,GAAe,MAAM,CAAC,KAAK,CAAC,OAAP,CAArB;AACA,SAAK,eAAL,GAAuB,UAAU,CAAC,KAAK,CAAC,eAAP,CAAjC;AACD;;AAXH;AAAA;AAAA,WAaS,+BACL,OADK,EAEL,OAFK,EAGL,QAHK,EAGW;AAEhB,aAAO,IAAI,IAAJ,CAAS;AACd,QAAA,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,CAAT,EAAY,OAAO,CAAC,CAApB,EAAuB,QAAvB,CADA;AAEd,QAAA,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,CAAT,EAAY,OAAO,CAAC,CAApB,EAAuB,QAAvB,CAFA;AAGd,QAAA,KAAK,EAAE,WAAW,CAAC,OAAO,CAAC,KAAT,EAAgB,OAAO,CAAC,KAAxB,EAA+B,QAA/B,CAHJ;AAId,QAAA,MAAM,EAAE,WAAW,CAAC,OAAO,CAAC,MAAT,EAAiB,OAAO,CAAC,MAAzB,EAAiC,QAAjC;AAJL,OAAT,CAAP;AAMD;AAxBH;AAAA;AAAA,WA0BS,8BACL,MADK,EAEL,MAFK,EAGL,QAHK,EAGW;AAEhB,UAAM,MAAM,GAAG,oBAAoB,CAAC,qBAArB,CACb,MAAM,CAAC,MADM,EAEb,MAAM,CAAC,MAFM,EAGb,QAHa,CAAf;AAKA,aAAO,IAAI,oBAAJ,CAAyB,MAAzB,kCACF,MADE;AAEL,QAAA,OAAO,EAAE,WAAW,CAAC,MAAM,CAAC,OAAR,EAAiB,MAAM,CAAC,OAAxB,EAAiC,QAAjC,CAFf;AAGL,QAAA,eAAe,EAAE,gBAAgB,CAC/B,MAAM,CAAC,eADwB,EAE/B,MAAM,CAAC,eAFwB,EAG/B,QAH+B;AAH5B,SAAP;AASD;AA7CH;;AAAA;AAAA","sourcesContent":["import { Color, parseColor, interpolateColor } from \"./Color.web\";\nimport { Rect } from \"./Rect.web\";\nimport { CSSStyleDeclaration } from \"./types\";\n\n/*int backgroundColor = Color.TRANSPARENT;\n    float opacity = 1;\n    float borderTopLeftRadius = 0;\n    float borderTopRightRadius = 0;\n    float borderBottomLeftRadius = 0;\n    float borderBottomRightRadius = 0;\n    float borderWidth = 0;\n    int borderColor = Color.TRANSPARENT;\n    String borderStyle = \"solid\";\n    float elevation = 0;*/\n\nfunction interpolate(val1: number, val2: number, position: number) {\n  return val1 + (val2 - val1) * position;\n}\n\nexport class RNSharedElementStyle {\n  public readonly layout: Rect;\n  public readonly style: CSSStyleDeclaration;\n  public readonly opacity: number;\n  public readonly backgroundColor: Color;\n\n  constructor(layout: Rect, style: CSSStyleDeclaration) {\n    this.layout = layout;\n    this.style = style;\n    this.opacity = Number(style.opacity);\n    this.backgroundColor = parseColor(style.backgroundColor);\n  }\n\n  public static getInterpolatedLayout(\n    layout1: Rect,\n    layout2: Rect,\n    position: number\n  ) {\n    return new Rect({\n      x: interpolate(layout1.x, layout2.x, position),\n      y: interpolate(layout1.y, layout2.y, position),\n      width: interpolate(layout1.width, layout2.width, position),\n      height: interpolate(layout1.height, layout2.height, position)\n    });\n  }\n\n  public static getInterpolatedStyle(\n    style1: RNSharedElementStyle,\n    style2: RNSharedElementStyle,\n    position: number\n  ) {\n    const layout = RNSharedElementStyle.getInterpolatedLayout(\n      style1.layout,\n      style2.layout,\n      position\n    );\n    return new RNSharedElementStyle(layout, {\n      ...style1,\n      opacity: interpolate(style1.opacity, style2.opacity, position),\n      backgroundColor: interpolateColor(\n        style1.backgroundColor,\n        style2.backgroundColor,\n        position\n      )\n    });\n  }\n\n  /* \n\n    private RNSharedElementStyle getInterpolatedStyle(\n        RNSharedElementStyle style1,\n        RNSharedElementContent content1,\n        RNSharedElementStyle style2,\n        RNSharedElementContent content2,\n        float position\n    ) {\n        RNSharedElementStyle result = new RNSharedElementStyle();\n        result.scaleType = RNSharedElementStyle.getInterpolatingScaleType(style1, style2, position);\n        result.opacity = style1.opacity + ((style2.opacity - style1.opacity) * position);\n        result.backgroundColor = getInterpolatedColor(style1.backgroundColor, style2.backgroundColor, position);\n        result.borderTopLeftRadius = style1.borderTopLeftRadius + ((style2.borderTopLeftRadius - style1.borderTopLeftRadius) * position);\n        result.borderTopRightRadius = style1.borderTopRightRadius + ((style2.borderTopRightRadius - style1.borderTopRightRadius) * position);\n        result.borderBottomLeftRadius = style1.borderBottomLeftRadius + ((style2.borderBottomLeftRadius - style1.borderBottomLeftRadius) * position);\n        result.borderBottomRightRadius = style1.borderBottomRightRadius + ((style2.borderBottomRightRadius - style1.borderBottomRightRadius) * position);\n        result.borderWidth = style1.borderWidth + ((style2.borderWidth - style1.borderWidth) * position);\n        result.borderColor = getInterpolatedColor(style1.borderColor, style2.borderColor, position);\n        result.borderStyle = style1.borderStyle;\n        result.elevation = style1.elevation + ((style2.elevation - style1.elevation) * position);\n        return result;\n    }*/\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}