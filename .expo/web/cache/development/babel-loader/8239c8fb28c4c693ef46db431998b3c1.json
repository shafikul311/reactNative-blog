{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Scic Porjects\\\\reactNative-blog\\\\node_modules\\\\react-native-shared-element\\\\build\\\\RNSharedElementTransitionView.web.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { RNSharedElementTransition } from \"./web/index.web\";\nexport var RNSharedElementTransitionView = function (_React$Component) {\n  _inherits(RNSharedElementTransitionView, _React$Component);\n\n  var _super = _createSuper(RNSharedElementTransitionView);\n\n  function RNSharedElementTransitionView() {\n    var _this;\n\n    _classCallCheck(this, RNSharedElementTransitionView);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      transition: new RNSharedElementTransition()\n    };\n\n    _this.onSetRef = function (ref) {\n      if (!ref) return;\n      var element = ref ? findNodeHandle(ref) : null;\n      var transition = _this.state.transition;\n      transition.element = element;\n    };\n\n    return _this;\n  }\n\n  _createClass(RNSharedElementTransitionView, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.transition.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        ref: this.onSetRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 16\n        }\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var startNode = props.startNode,\n          endNode = props.endNode,\n          animation = props.animation,\n          resize = props.resize,\n          align = props.align,\n          nodePosition = props.nodePosition;\n      var transition = state.transition;\n      transition.setNode(false, startNode.node, startNode.ancestor);\n      transition.setNode(true, endNode.node, endNode.ancestor);\n      transition.nodePosition = nodePosition;\n      transition.animation = animation;\n      transition.resize = resize;\n      transition.align = align;\n      transition.didSetProps();\n      return null;\n    }\n  }]);\n\n  return RNSharedElementTransitionView;\n}(React.Component);","map":{"version":3,"sources":["../src/RNSharedElementTransitionView.web.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;AAGA,SACE,yBADF;AA2BA,WAAa,6BAAb;AAAA;;AAAA;;AAAA,2CAAA;AAAA;;AAAA;;;AAIE,UAAA,KAAA,GAAQ;AACN,MAAA,UAAU,EAAE,IAAI,yBAAJ;AADN,KAAR;;AAgCQ,UAAA,QAAA,GAAW,UAAC,GAAD,EAAa;AAC9B,UAAI,CAAC,GAAL,EAAU;AACV,UAAM,OAAO,GAAQ,GAAG,GAAG,cAAc,CAAC,GAAD,CAAjB,GAAyB,IAAjD;AACA,UAAQ,UAAR,GAAuB,MAAK,KAA5B,CAAQ,UAAR;AACA,MAAA,UAAU,CAAC,OAAX,GAAqB,OAArB;AACD,KALO;;AApCV;AA+CC;;AA/CD;AAAA;AAAA,WA4BE,iCAAqB;AACnB,aAAO,KAAP;AACD;AA9BH;AAAA;AAAA,WAgCE,gCAAoB;AAClB,WAAK,KAAL,CAAW,UAAX,CAAsB,OAAtB;AACD;AAlCH;AAAA;AAAA,WA2CE,kBAAM;AAEJ,aAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAE,KAAK,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AA9CH;AAAA;AAAA,WAQE,kCAAgC,KAAhC,EAAkD,KAAlD,EAAkE;AAChE,UACE,SADF,GAOI,KAPJ,CACE,SADF;AAAA,UAEE,OAFF,GAOI,KAPJ,CAEE,OAFF;AAAA,UAGE,SAHF,GAOI,KAPJ,CAGE,SAHF;AAAA,UAIE,MAJF,GAOI,KAPJ,CAIE,MAJF;AAAA,UAKE,KALF,GAOI,KAPJ,CAKE,KALF;AAAA,UAME,YANF,GAOI,KAPJ,CAME,YANF;AAQA,UAAQ,UAAR,GAAuB,KAAvB,CAAQ,UAAR;AACA,MAAA,UAAU,CAAC,OAAX,CAAmB,KAAnB,EAA0B,SAAS,CAAC,IAApC,EAA0C,SAAS,CAAC,QAApD;AACA,MAAA,UAAU,CAAC,OAAX,CAAmB,IAAnB,EAAyB,OAAO,CAAC,IAAjC,EAAuC,OAAO,CAAC,QAA/C;AACA,MAAA,UAAU,CAAC,YAAX,GAA0B,YAA1B;AACA,MAAA,UAAU,CAAC,SAAX,GAAuB,SAAvB;AACA,MAAA,UAAU,CAAC,MAAX,GAAoB,MAApB;AACA,MAAA,UAAU,CAAC,KAAX,GAAmB,KAAnB;AACA,MAAA,UAAU,CAAC,WAAX;AACA,aAAO,IAAP;AACD;AA1BH;;AAAA;AAAA,EAAmD,KAAK,CAAC,SAAzD","sourcesContent":["import * as React from \"react\";\nimport { View, findNodeHandle } from \"react-native\";\n\nimport {\n  RNSharedElementTransition,\n  RNSharedElementNodeConfig,\n  RNSharedElementAnimation,\n  RNSharedElementResize,\n  RNSharedElementAlign\n} from \"./web/index.web\";\n\ntype PropsType = {\n  startNode: {\n    node: RNSharedElementNodeConfig | null;\n    ancestor: RNSharedElementNodeConfig | null;\n  };\n  endNode: {\n    node: RNSharedElementNodeConfig | null;\n    ancestor: RNSharedElementNodeConfig | null;\n  };\n  nodePosition: number | any;\n  animation: RNSharedElementAnimation;\n  resize: RNSharedElementResize;\n  align: RNSharedElementAlign;\n  //onMeasure?: (event: SharedElementOnMeasureEvent) => void;\n};\ntype StateType = {\n  transition: RNSharedElementTransition;\n};\n\nexport class RNSharedElementTransitionView extends React.Component<\n  PropsType,\n  StateType\n> {\n  state = {\n    transition: new RNSharedElementTransition()\n  };\n\n  static getDerivedStateFromProps(props: PropsType, state: StateType) {\n    const {\n      startNode,\n      endNode,\n      animation,\n      resize,\n      align,\n      nodePosition\n    } = props;\n    const { transition } = state;\n    transition.setNode(false, startNode.node, startNode.ancestor);\n    transition.setNode(true, endNode.node, endNode.ancestor);\n    transition.nodePosition = nodePosition;\n    transition.animation = animation;\n    transition.resize = resize;\n    transition.align = align;\n    transition.didSetProps();\n    return null;\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillUnmount() {\n    this.state.transition.destroy();\n  }\n\n  private onSetRef = (ref: any) => {\n    if (!ref) return;\n    const element: any = ref ? findNodeHandle(ref) : null;\n    const { transition } = this.state;\n    transition.element = element;\n  };\n\n  render() {\n    // console.log(\"RNSharedElementTransitionView.render\");\n    return <View ref={this.onSetRef} />;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}