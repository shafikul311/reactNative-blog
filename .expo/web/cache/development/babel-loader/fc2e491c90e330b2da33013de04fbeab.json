{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createSharedElementStackNavigator;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _SharedElementRendererProxy = require(\"./SharedElementRendererProxy\");\n\nvar _SharedElementRendererContext = _interopRequireDefault(require(\"./SharedElementRendererContext\"));\n\nvar _SharedElementRendererView = _interopRequireDefault(require(\"./SharedElementRendererView\"));\n\nvar _SharedElementRendererData = _interopRequireDefault(require(\"./SharedElementRendererData\"));\n\nvar _createSharedElementScene = _interopRequireDefault(require(\"./createSharedElementScene\"));\n\nvar _jsxFileName = \"/Users/hein/repos/react/react-navigation-sharedelement/src/createSharedElementStackNavigator.tsx\";\nvar _navigatorId = 1;\n\nfunction createSharedElementStackNavigator(options) {\n  var navigatorId = options && options.name ? options.name : \"stack\".concat(_navigatorId);\n  _navigatorId++;\n  var rendererDataProxy = new _SharedElementRendererProxy.SharedElementRendererProxy();\n\n  function SharedElementStackNavigator(_ref) {\n    var initialRouteName = _ref.initialRouteName,\n        children = _ref.children,\n        screenOptions = _ref.screenOptions,\n        rest = (0, _objectWithoutProperties2.default)(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n    var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n      initialRouteName: initialRouteName,\n      children: children,\n      screenOptions: screenOptions\n    }),\n        state = _useNavigationBuilder.state,\n        descriptors = _useNavigationBuilder.descriptors,\n        navigation = _useNavigationBuilder.navigation;\n\n    var rendererDataRef = React.useRef(null);\n    return React.createElement(_SharedElementRendererContext.default.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      }\n    }, function (rendererData) {\n      if (!rendererData) {\n        rendererDataRef.current = rendererDataRef.current || new _SharedElementRendererData.default();\n        rendererDataProxy.source = rendererDataRef.current;\n      } else {\n        rendererDataProxy.source = rendererData;\n      }\n\n      return React.createElement(_SharedElementRendererContext.default.Provider, {\n        value: rendererDataProxy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        }\n      }, React.createElement(_stack.StackView, (0, _extends2.default)({}, rest, {\n        state: state,\n        navigation: navigation,\n        descriptors: descriptors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      })), rendererDataRef.current ? React.createElement(_SharedElementRendererView.default, {\n        rendererData: rendererDataRef.current,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        }\n      }) : undefined);\n    });\n  }\n\n  var navigatorFactory = (0, _native.createNavigatorFactory)(SharedElementStackNavigator);\n\n  var _navigatorFactory = navigatorFactory(),\n      Navigator = _navigatorFactory.Navigator,\n      Screen = _navigatorFactory.Screen;\n\n  function wrapComponent(component) {\n    return (0, _createSharedElementScene.default)(component, rendererDataProxy, _stack.CardAnimationContext, navigatorId);\n  }\n\n  function wrapScreen(_) {\n    return null;\n  }\n\n  function getSharedElementsChildrenProps(children) {\n    return React.Children.toArray(children).reduce(function (acc, child) {\n      if (React.isValidElement(child)) {\n        if (child.type === wrapScreen) {\n          acc.push(child.props);\n        }\n\n        if (child.type === React.Fragment) {\n          acc.push.apply(acc, (0, _toConsumableArray2.default)(getSharedElementsChildrenProps(child.props.children)));\n        }\n      }\n\n      return acc;\n    }, []);\n  }\n\n  function WrapNavigator(props) {\n    var children = props.children,\n        rest = (0, _objectWithoutProperties2.default)(props, [\"children\"]);\n    var componentMapRef = React.useRef(new Map());\n    var screenChildrenProps = getSharedElementsChildrenProps(children);\n    return React.createElement(Navigator, (0, _extends2.default)({}, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      }\n    }), screenChildrenProps.map(function (_ref2) {\n      var component = _ref2.component,\n          sharedElementsConfig = _ref2.sharedElementsConfig,\n          childrenProps = (0, _objectWithoutProperties2.default)(_ref2, [\"component\", \"sharedElementsConfig\"]);\n      if (sharedElementsConfig) component.sharedElements = sharedElementsConfig;\n\n      if (!componentMapRef.current.has(component)) {\n        componentMapRef.current.set(component, wrapComponent(component));\n      }\n\n      var wrappedComponent = componentMapRef.current.get(component);\n      return React.createElement(Screen, (0, _extends2.default)({\n        key: childrenProps.name\n      }, childrenProps, {\n        component: wrappedComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        }\n      }));\n    }));\n  }\n\n  return {\n    Navigator: WrapNavigator,\n    Screen: wrapScreen\n  };\n}","map":{"version":3,"sources":["createSharedElementStackNavigator.tsx"],"names":["_navigatorId","navigatorId","options","rendererDataProxy","SharedElementRendererProxy","initialRouteName","children","screenOptions","rest","state","descriptors","navigation","StackRouter","rendererDataRef","React","SharedElementRendererData","navigatorFactory","Navigator","Screen","CardAnimationContext","child","acc","getSharedElementsChildrenProps","props","componentMapRef","screenChildrenProps","component","sharedElementsConfig","childrenProps","wrapComponent","wrappedComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  StackRouter,\n  DefaultNavigatorOptions,\n  RouteConfig,\n  StackRouterOptions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport {\n  CardAnimationContext,\n  StackView,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport { SharedElementRendererProxy } from './SharedElementRendererProxy';\nimport SharedElementRendererContext from './SharedElementRendererContext';\nimport SharedElementRendererView from './SharedElementRendererView';\nimport SharedElementRendererData from './SharedElementRendererData';\nimport createSharedElementScene from './createSharedElementScene';\nimport {\n  SharedElementSceneComponent,\n  SharedElementsComponentConfig,\n} from './types';\nimport {\n  StackNavigationConfig,\n  StackNavigationEventMap,\n} from '@react-navigation/stack/lib/typescript/src/types';\n\nlet _navigatorId = 1;\n\nexport default function createSharedElementStackNavigator<\n  ParamList extends Record<string, object | undefined>\n>(options?: { name?: string }) {\n  const navigatorId =\n    options && options.name ? options.name : `stack${_navigatorId}`;\n  _navigatorId++;\n\n  const rendererDataProxy = new SharedElementRendererProxy();\n\n  type Props = DefaultNavigatorOptions<StackNavigationOptions> &\n    StackRouterOptions &\n    StackNavigationConfig;\n\n  function SharedElementStackNavigator({\n    initialRouteName,\n    children,\n    screenOptions,\n    ...rest\n  }: Props) {\n    const { state, descriptors, navigation } = useNavigationBuilder<\n      StackNavigationState,\n      StackRouterOptions,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenOptions,\n    });\n\n    const rendererDataRef = React.useRef<SharedElementRendererData | null>(\n      null\n    );\n\n    return (\n      <SharedElementRendererContext.Consumer>\n        {rendererData => {\n          // In case a renderer is already present higher up in the chain\n          // then don't bother creating a renderer here, but use that one instead\n          if (!rendererData) {\n            rendererDataRef.current =\n              rendererDataRef.current || new SharedElementRendererData();\n            rendererDataProxy.source = rendererDataRef.current;\n          } else {\n            rendererDataProxy.source = rendererData;\n          }\n          return (\n            <SharedElementRendererContext.Provider value={rendererDataProxy}>\n              <StackView\n                {...rest}\n                state={state}\n                navigation={navigation}\n                descriptors={descriptors}\n              />\n              {rendererDataRef.current ? (\n                <SharedElementRendererView\n                  rendererData={rendererDataRef.current}\n                />\n              ) : (\n                undefined\n              )}\n            </SharedElementRendererContext.Provider>\n          );\n        }}\n      </SharedElementRendererContext.Consumer>\n    );\n  }\n\n  const navigatorFactory = createNavigatorFactory<\n    StackNavigationState,\n    StackNavigationOptions,\n    StackNavigationEventMap,\n    typeof SharedElementStackNavigator\n  >(SharedElementStackNavigator);\n\n  const { Navigator, Screen } = navigatorFactory<ParamList>();\n\n  type ScreenProps<RouteName extends keyof ParamList> = Omit<\n    RouteConfig<\n      ParamList,\n      RouteName,\n      StackNavigationState,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >,\n    'component' | 'children'\n  > & {\n    component: SharedElementSceneComponent;\n    sharedElementsConfig?: SharedElementsComponentConfig;\n  };\n\n  function wrapComponent(component: SharedElementSceneComponent) {\n    return createSharedElementScene(\n      component,\n      rendererDataProxy,\n      CardAnimationContext,\n      navigatorId\n    );\n  }\n\n  // Wrapping Screen to explicitly statically type a \"Shared Element\" Screen.\n  function wrapScreen<RouteName extends keyof ParamList>(\n    _: ScreenProps<RouteName>\n  ) {\n    return null;\n  }\n\n  type NavigatorProps = React.ComponentProps<typeof Navigator>;\n\n  function getSharedElementsChildrenProps(children: React.ReactNode) {\n    return React.Children.toArray(children).reduce<any[]>((acc, child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === wrapScreen) {\n          acc.push(child.props);\n        }\n\n        if (child.type === React.Fragment) {\n          acc.push(...getSharedElementsChildrenProps(child.props.children));\n        }\n      }\n      return acc;\n    }, []);\n  }\n\n  // react-navigation only allows the Screen component as direct children\n  // of Navigator, this is why we need to wrap the Navigator\n  function WrapNavigator(props: NavigatorProps) {\n    const { children, ...rest } = props;\n    const componentMapRef = React.useRef<Map<any, any>>(new Map());\n    const screenChildrenProps = getSharedElementsChildrenProps(children);\n\n    return (\n      <Navigator {...rest}>\n        {screenChildrenProps.map(\n          ({ component, sharedElementsConfig, ...childrenProps }) => {\n            if (sharedElementsConfig)\n              component.sharedElements = sharedElementsConfig;\n\n            if (!componentMapRef.current.has(component)) {\n              componentMapRef.current.set(component, wrapComponent(component));\n            }\n\n            const wrappedComponent = componentMapRef.current.get(component);\n\n            return (\n              <Screen\n                key={childrenProps.name}\n                {...childrenProps}\n                component={wrappedComponent}\n              />\n            );\n          }\n        )}\n      </Navigator>\n    );\n  }\n\n  return {\n    Navigator: WrapNavigator,\n    Screen: wrapScreen,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}