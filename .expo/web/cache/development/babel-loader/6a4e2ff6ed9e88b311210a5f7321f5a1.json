{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _hoistNonReactStatics = _interopRequireDefault(require(\"hoist-non-react-statics\"));\n\nvar _reactNativeSharedElement = require(\"react-native-shared-element\");\n\nvar _SharedElementSceneData = _interopRequireDefault(require(\"./SharedElementSceneData\"));\n\nvar _SharedElementSceneContext = _interopRequireDefault(require(\"./SharedElementSceneContext\"));\n\nvar _utils = require(\"./utils\");\n\nvar _jsxFileName = \"/Users/hein/repos/react/react-navigation-sharedelement/src/createSharedElementScene.tsx\";\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\n\nfunction createSharedElementScene(Component, rendererData, AnimationContext, navigatorId) {\n  var SharedElementSceneView = function (_React$PureComponent) {\n    (0, _inherits2.default)(SharedElementSceneView, _React$PureComponent);\n\n    function SharedElementSceneView() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      (0, _classCallCheck2.default)(this, SharedElementSceneView);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SharedElementSceneView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"subscriptions\", {});\n      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"sceneData\", new _SharedElementSceneData.default(Component, _this.props.navigation, _this.props.route, navigatorId, rendererData.nestingDepth));\n      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"transitionEnd\", function (_ref) {\n        var closing = _ref.data.closing;\n        rendererData.endTransition(closing, navigatorId, rendererData.nestingDepth);\n      });\n      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"onRenderAnimationContext\", function (value) {\n        _this.sceneData.setAnimimationContextValue(value);\n\n        return null;\n      });\n      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"onSetRef\", function (ref) {\n        _this.sceneData.setAncestor((0, _reactNativeSharedElement.nodeFromRef)(ref));\n      });\n      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"onWillFocus\", function () {\n        var _this$props = _this.props,\n            navigation = _this$props.navigation,\n            route = _this$props.route;\n\n        if (isActiveRoute(navigation, route)) {\n          rendererData.updateSceneState(_this.sceneData, route, 'willFocus');\n\n          _reactNative.InteractionManager.runAfterInteractions(function () {\n            rendererData.updateSceneState(_this.sceneData, route, 'didFocus');\n          });\n        }\n      });\n      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"onWillBlur\", function () {\n        var route = _this.props.route;\n        rendererData.updateSceneState(_this.sceneData, route, 'willBlur');\n      });\n      return _this;\n    }\n\n    (0, _createClass2.default)(SharedElementSceneView, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var navigation = this.props.navigation;\n        this.subscriptions = {\n          willFocus: navigation.addListener('focus', this.onWillFocus),\n          willBlur: navigation.addListener('blur', this.onWillBlur),\n          transitionStart: navigation.addListener('transitionStart', this.transitionStart),\n          transitionEnd: navigation.addListener('transitionEnd', this.transitionEnd)\n        };\n      }\n    }, {\n      key: \"transitionStart\",\n      value: function transitionStart(_ref2) {\n        var closing = _ref2.data.closing;\n        rendererData.startTransition(closing, navigatorId, rendererData.nestingDepth);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        Object.values(this.subscriptions).forEach(function (unsubscribe) {\n          return unsubscribe();\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(_SharedElementSceneContext.default.Provider, {\n          value: this.sceneData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          }\n        }, React.createElement(_reactNative.View, {\n          style: styles.container,\n          collapsable: false,\n          ref: this.onSetRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          }\n        }, React.createElement(AnimationContext.Consumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          }\n        }, this.onRenderAnimationContext), React.createElement(Component, (0, _extends2.default)({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          }\n        }))));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        this.sceneData.navigation = this.props.navigation;\n      }\n    }]);\n    return SharedElementSceneView;\n  }(React.PureComponent);\n\n  (0, _hoistNonReactStatics.default)(SharedElementSceneView, Component);\n  return SharedElementSceneView;\n}\n\nvar isActiveRoute = function isActiveRoute(navigation, route) {\n  var state = navigation.dangerouslyGetState();\n  var activeRoute = (0, _utils.getActiveRoute)(state);\n  return route.name === activeRoute.name;\n};\n\nvar _default = createSharedElementScene;\nexports.default = _default;","map":{"version":3,"sources":["createSharedElementScene.tsx"],"names":["styles","StyleSheet","container","flex","SharedElementSceneView","React","SharedElementSceneData","rendererData","navigation","willFocus","willBlur","transitionStart","transitionEnd","data","closing","Object","unsubscribe","route","isActiveRoute","InteractionManager","state","activeRoute","createSharedElementScene"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, InteractionManager } from 'react-native';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { nodeFromRef } from 'react-native-shared-element';\nimport SharedElementSceneData from './SharedElementSceneData';\nimport SharedElementSceneContext from './SharedElementSceneContext';\nimport {\n  SharedElementEventSubscription,\n  SharedElementSceneComponent,\n} from './types';\nimport { ISharedElementRendererData } from './SharedElementRendererData';\nimport { getActiveRoute } from './utils';\nimport {\n  StackNavigationProp,\n  StackCardInterpolationProps,\n} from '@react-navigation/stack';\nimport { Route } from '@react-navigation/native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\ntype PropsType = {\n  navigation: StackNavigationProp<any>;\n  route: Route<any>;\n};\n\nfunction createSharedElementScene(\n  Component: SharedElementSceneComponent,\n  rendererData: ISharedElementRendererData,\n  AnimationContext: React.Context<StackCardInterpolationProps | undefined>,\n  navigatorId: string\n): React.ComponentType<any> {\n  class SharedElementSceneView extends React.PureComponent<PropsType> {\n    private subscriptions: {\n      [key: string]: SharedElementEventSubscription;\n    } = {};\n    private sceneData: SharedElementSceneData = new SharedElementSceneData(\n      Component,\n      this.props.navigation,\n      this.props.route,\n      navigatorId,\n      rendererData.nestingDepth\n    );\n\n    componentDidMount() {\n      const { navigation } = this.props;\n      this.subscriptions = {\n        willFocus: navigation.addListener('focus', this.onWillFocus),\n        willBlur: navigation.addListener('blur', this.onWillBlur),\n        transitionStart: navigation.addListener(\n          'transitionStart',\n          this.transitionStart\n        ),\n        transitionEnd: navigation.addListener(\n          'transitionEnd',\n          this.transitionEnd\n        ),\n      };\n    }\n\n    transitionStart({ data: { closing } }: any) {\n      rendererData.startTransition(\n        closing,\n        navigatorId,\n        rendererData.nestingDepth\n      );\n    }\n\n    transitionEnd = ({ data: { closing } }: any) => {\n      rendererData.endTransition(\n        closing,\n        navigatorId,\n        rendererData.nestingDepth\n      );\n    };\n\n    componentWillUnmount() {\n      Object.values(this.subscriptions).forEach(unsubscribe => unsubscribe());\n    }\n\n    render() {\n      // console.log('SharedElementSceneView.render');\n      return (\n        <SharedElementSceneContext.Provider value={this.sceneData}>\n          <View\n            style={styles.container}\n            collapsable={false}\n            ref={this.onSetRef}\n          >\n            <AnimationContext.Consumer>\n              {this.onRenderAnimationContext}\n            </AnimationContext.Consumer>\n            <Component {...this.props} />\n          </View>\n        </SharedElementSceneContext.Provider>\n      );\n    }\n\n    private onRenderAnimationContext = (\n      value: StackCardInterpolationProps | undefined\n    ) => {\n      this.sceneData.setAnimimationContextValue(value);\n      return null;\n    };\n\n    componentDidUpdate() {\n      this.sceneData.navigation = this.props.navigation;\n    }\n\n    private onSetRef = (ref: any) => {\n      this.sceneData.setAncestor(nodeFromRef(ref));\n    };\n\n    private onWillFocus = () => {\n      const { navigation, route } = this.props;\n\n      //console.log('onWillFocus: ', navigation.state, activeRoute);\n      if (isActiveRoute(navigation, route)) {\n        rendererData.updateSceneState(this.sceneData, route, 'willFocus');\n        InteractionManager.runAfterInteractions(() => {\n          rendererData.updateSceneState(this.sceneData, route, 'didFocus');\n        });\n      }\n    };\n\n    private onWillBlur = () => {\n      const { route } = this.props;\n\n      //console.log('onWillBlur: ', navigation.state, activeRoute);\n      rendererData.updateSceneState(this.sceneData, route, 'willBlur');\n    };\n  }\n\n  hoistNonReactStatics(SharedElementSceneView, Component);\n  return SharedElementSceneView;\n}\n\nconst isActiveRoute = (\n  navigation: StackNavigationProp<any>,\n  route: Route<any>\n): boolean => {\n  const state = navigation.dangerouslyGetState();\n  const activeRoute = getActiveRoute(state);\n  return route.name === activeRoute.name;\n};\n\nexport default createSharedElementScene;\n"]},"metadata":{},"sourceType":"script"}