{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar INVERT_OPTIONS = {\n  inputRange: [0, 1],\n  outputRange: [1, 0]\n};\n\nvar SharedElementSceneData = function () {\n  function SharedElementSceneData(Component, navigation, route, navigatorId, nestingDepth) {\n    (0, _classCallCheck2.default)(this, SharedElementSceneData);\n    (0, _defineProperty2.default)(this, \"updateSubscribers\", new Set());\n    (0, _defineProperty2.default)(this, \"ancestorNode\", undefined);\n    (0, _defineProperty2.default)(this, \"nodes\", {});\n    (0, _defineProperty2.default)(this, \"animationContextValue\", void 0);\n    (0, _defineProperty2.default)(this, \"Component\", void 0);\n    (0, _defineProperty2.default)(this, \"name\", void 0);\n    (0, _defineProperty2.default)(this, \"navigatorId\", void 0);\n    (0, _defineProperty2.default)(this, \"nestingDepth\", void 0);\n    (0, _defineProperty2.default)(this, \"navigation\", void 0);\n    (0, _defineProperty2.default)(this, \"route\", void 0);\n    this.Component = Component;\n    this.navigation = navigation;\n    this.route = route;\n    this.navigatorId = navigatorId;\n    this.nestingDepth = nestingDepth;\n    this.name = Component.displayName || Component.name || (Component.constructor ? Component.constructor.name : undefined) || '';\n  }\n\n  (0, _createClass2.default)(SharedElementSceneData, [{\n    key: \"setAnimimationContextValue\",\n    value: function setAnimimationContextValue(value) {\n      this.animationContextValue = value;\n    }\n  }, {\n    key: \"getAnimValue\",\n    value: function getAnimValue(closing) {\n      var animationContextValue = this.animationContextValue;\n      if (!animationContextValue) return;\n      var progress = animationContextValue.current.progress;\n      return closing ? progress.interpolate(INVERT_OPTIONS) : progress;\n    }\n  }, {\n    key: \"getAncestor\",\n    value: function getAncestor() {\n      return this.ancestorNode;\n    }\n  }, {\n    key: \"setAncestor\",\n    value: function setAncestor(ancestorNode) {\n      if (this.ancestorNode === ancestorNode) return;\n      this.ancestorNode = ancestorNode || undefined;\n      this.emitUpdateEvent('ancestor', this.ancestorNode, '');\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(id, node) {\n      this.nodes[id] = node;\n      this.emitUpdateEvent('add', node, id);\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(id, node) {\n      delete this.nodes[id];\n      this.emitUpdateEvent('remove', node, id);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(id) {\n      return this.nodes[id];\n    }\n  }, {\n    key: \"addUpdateListener\",\n    value: function addUpdateListener(handler) {\n      var _this = this;\n\n      this.updateSubscribers.add(handler);\n      return function () {\n        return _this.updateSubscribers.delete(handler);\n      };\n    }\n  }, {\n    key: \"emitUpdateEvent\",\n    value: function emitUpdateEvent(eventType, node, id) {\n      this.updateSubscribers.forEach(function (handler) {\n        return handler(eventType, node, id);\n      });\n    }\n  }]);\n  return SharedElementSceneData;\n}();\n\nexports.default = SharedElementSceneData;","map":{"version":3,"sources":["SharedElementSceneData.ts"],"names":["INVERT_OPTIONS","inputRange","outputRange","SharedElementSceneData","undefined","Component","value","closing","animationContextValue","progress","ancestorNode","id","node","handler","eventType"],"mappings":"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","sourcesContent":["import {\n  SharedElementNode,\n  SharedElementEventSubscription,\n  SharedElementSceneComponent,\n  SharedElementRoute,\n} from './types';\nimport {\n  StackNavigationProp,\n  StackCardInterpolationProps,\n} from '@react-navigation/stack';\nimport { Animated } from 'react-native';\n\nexport type SharedElementSceneUpdateHandlerEventType =\n  | 'ancestor'\n  | 'add'\n  | 'remove';\n\nexport type SharedElementSceneUpdateHandler = (\n  eventType: SharedElementSceneUpdateHandlerEventType,\n  node: SharedElementNode | undefined,\n  id: string\n) => any;\n\nconst INVERT_OPTIONS = {\n  inputRange: [0, 1],\n  outputRange: [1, 0],\n};\n\nexport type SharedElementSceneEventType =\n  | 'willFocus'\n  | 'didFocus'\n  | 'willBlur'\n  | 'didBlur';\n\nexport default class SharedElementSceneData {\n  private updateSubscribers = new Set<SharedElementSceneUpdateHandler>();\n  private ancestorNode?: SharedElementNode = undefined;\n  private nodes: {\n    [key: string]: SharedElementNode;\n  } = {};\n  private animationContextValue?: StackCardInterpolationProps;\n  public readonly Component: SharedElementSceneComponent;\n  public readonly name: string;\n  public readonly navigatorId: string;\n  public readonly nestingDepth: number;\n  public navigation: StackNavigationProp<any>;\n  public route: SharedElementRoute<any>;\n\n  constructor(\n    Component: SharedElementSceneComponent,\n    navigation: StackNavigationProp<any>,\n    route: SharedElementRoute,\n    navigatorId: string,\n    nestingDepth: number\n  ) {\n    this.Component = Component;\n    this.navigation = navigation;\n    this.route = route;\n    this.navigatorId = navigatorId;\n    this.nestingDepth = nestingDepth;\n    this.name =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor ? Component.constructor.name : undefined) ||\n      '';\n  }\n\n  setAnimimationContextValue(value: StackCardInterpolationProps | undefined) {\n    this.animationContextValue = value;\n  }\n\n  getAnimValue(closing: boolean): Animated.AnimatedInterpolation | undefined {\n    const { animationContextValue } = this;\n    if (!animationContextValue) return;\n    const { progress } = animationContextValue.current;\n    return closing ? progress.interpolate(INVERT_OPTIONS) : progress;\n  }\n\n  getAncestor(): SharedElementNode | undefined {\n    return this.ancestorNode;\n  }\n\n  setAncestor(ancestorNode: SharedElementNode | null) {\n    // console.log('SharedElementSceneData.setAncestor');\n    if (this.ancestorNode === ancestorNode) return;\n    this.ancestorNode = ancestorNode || undefined;\n    this.emitUpdateEvent('ancestor', this.ancestorNode, '');\n  }\n\n  addNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.addNode: ', id);\n    this.nodes[id] = node;\n    this.emitUpdateEvent('add', node, id);\n  }\n\n  removeNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.removeNode: ', id);\n    delete this.nodes[id];\n    this.emitUpdateEvent('remove', node, id);\n  }\n\n  getNode(id: string): SharedElementNode | undefined {\n    return this.nodes[id];\n  }\n\n  addUpdateListener(\n    handler: SharedElementSceneUpdateHandler\n  ): SharedElementEventSubscription {\n    this.updateSubscribers.add(handler);\n    return () => this.updateSubscribers.delete(handler);\n  }\n\n  private emitUpdateEvent(\n    eventType: SharedElementSceneUpdateHandlerEventType,\n    node: SharedElementNode | undefined,\n    id: string\n  ): void {\n    this.updateSubscribers.forEach(handler => handler(eventType, node, id));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}